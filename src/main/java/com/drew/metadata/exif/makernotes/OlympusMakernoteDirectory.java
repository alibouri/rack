package com.drew.metadata.exif.makernotes;

import com.drew.metadata.b;
import java.io.IOException;
import java.util.HashMap;
import l4.l;

public class OlympusMakernoteDirectory extends b {
    static final HashMap OlympusCameraTypes = null;
    public static final int TAG_AF_RESULT = 0x1038;
    public static final int TAG_APERTURE_VALUE = 0x1002;
    public static final int TAG_BLACK_LEVEL = 0x1012;
    public static final int TAG_BLUE_BALANCE = 4120;
    public static final int TAG_BODY_FIRMWARE_VERSION = 260;
    public static final int TAG_BRACKET = 0x1006;
    public static final int TAG_BRIGHTNESS_VALUE = 0x1003;
    public static final int TAG_BW_MODE = 0x203;
    public static final int TAG_CAMERA_ID = 0x209;
    public static final int TAG_CAMERA_SETTINGS = 0x2020;
    public static final int TAG_CAMERA_SETTINGS_1 = 1;
    public static final int TAG_CAMERA_SETTINGS_2 = 3;
    public static final int TAG_CAMERA_TYPE = 0x207;
    public static final int TAG_CCD_SCAN_MODE = 0x1039;
    public static final int TAG_COLOR_MATRIX_NUMBER = 0x1019;
    public static final int TAG_COLOR_TEMPERATURE_BG = 0x1013;
    public static final int TAG_COLOR_TEMPERATURE_RG = 0x1014;
    public static final int TAG_COLOUR_CONTROL = 0x102B;
    public static final int TAG_COLOUR_MATRIX = 0x1011;
    public static final int TAG_COLOUR_MODE = 0x101;
    public static final int TAG_COMPRESSED_IMAGE_SIZE = 0x40;
    public static final int TAG_COMPRESSION_RATIO = 0x1034;
    public static final int TAG_CONTRAST = 0x1029;
    public static final int TAG_CORING_FILTER = 0x102D;
    public static final int TAG_DATA_DUMP_1 = 0xF00;
    public static final int TAG_DATA_DUMP_2 = 0xF01;
    public static final int TAG_DIGITAL_ZOOM = 0x204;
    public static final int TAG_EQUIPMENT = 0x2010;
    public static final int TAG_EXTERNAL_FLASH_AE1 = 0x101F;
    public static final int TAG_EXTERNAL_FLASH_AE1_0 = 0x101B;
    public static final int TAG_EXTERNAL_FLASH_AE2 = 0x1020;
    public static final int TAG_EXTERNAL_FLASH_AE2_0 = 0x101C;
    public static final int TAG_EXTERNAL_FLASH_BOUNCE = 0x1026;
    public static final int TAG_EXTERNAL_FLASH_G_VALUE = 0x1025;
    public static final int TAG_EXTERNAL_FLASH_MODE = 0x1028;
    public static final int TAG_EXTERNAL_FLASH_ZOOM = 0x1027;
    public static final int TAG_FIELD_COUNT = 0x103F;
    public static final int TAG_FIRMWARE = 0x405;
    public static final int TAG_FLASH_BIAS = 0x1023;
    public static final int TAG_FLASH_CHARGE_LEVEL = 0x1010;
    public static final int TAG_FLASH_DEVICE = 0x1005;
    public static final int TAG_FLASH_MODE = 4100;
    public static final int TAG_FOCAL_PLANE_DIAGONAL = 0x205;
    public static final int TAG_FOCUS_DISTANCE = 0x100C;
    public static final int TAG_FOCUS_INFO = 0x2050;
    public static final int TAG_FOCUS_MODE = 0x100B;
    public static final int TAG_FOCUS_RANGE = 0x100A;
    public static final int TAG_IMAGE_HEIGHT = 0x20C;
    public static final int TAG_IMAGE_PROCESSING = 0x2040;
    public static final int TAG_IMAGE_QUALITY_1 = 0x102;
    public static final int TAG_IMAGE_QUALITY_2 = 0x103;
    public static final int TAG_IMAGE_WIDTH = 0x20B;
    public static final int TAG_INFINITY_LENS_STEP = 0x103B;
    public static final int TAG_INTERNAL_FLASH_AE1 = 0x1021;
    public static final int TAG_INTERNAL_FLASH_AE1_0 = 0x101D;
    public static final int TAG_INTERNAL_FLASH_AE2 = 4130;
    public static final int TAG_INTERNAL_FLASH_AE2_0 = 0x101E;
    public static final int TAG_INTERNAL_FLASH_TABLE = 0x1024;
    public static final int TAG_ISO_VALUE = 0x1001;
    public static final int TAG_JPEG_QUALITY = 0x201;
    public static final int TAG_LENS_DISTORTION_PARAMETERS = 0x206;
    public static final int TAG_LENS_TEMPERATURE = 0x1008;
    public static final int TAG_LIGHT_CONDITION = 0x1009;
    public static final int TAG_LIGHT_VALUE_CENTER = 0x103D;
    public static final int TAG_LIGHT_VALUE_PERIPHERY = 0x103E;
    public static final int TAG_MACRO_FOCUS = 0x100E;
    public static final int TAG_MACRO_MODE = 0x202;
    public static final int TAG_MAIN_INFO = 0x4000;
    public static final int TAG_MAKERNOTE_VERSION = 0;
    public static final int TAG_MINOLTA_THUMBNAIL_LENGTH = 0x89;
    public static final int TAG_MINOLTA_THUMBNAIL_OFFSET_1 = 0x81;
    public static final int TAG_MINOLTA_THUMBNAIL_OFFSET_2 = 0x88;
    public static final int TAG_NEAR_LENS_STEP = 0x103C;
    public static final int TAG_NOISE_REDUCTION = 0x103A;
    public static final int TAG_OLYMPUS_IMAGE_HEIGHT = 0x102F;
    public static final int TAG_OLYMPUS_IMAGE_WIDTH = 0x102E;
    public static final int TAG_ONE_TOUCH_WB = 770;
    public static final int TAG_ORIGINAL_MANUFACTURER_MODEL = 0x20D;
    public static final int TAG_PICT_INFO = 520;
    public static final int TAG_PREVIEW_IMAGE = 640;
    public static final int TAG_PREVIEW_IMAGE_LENGTH = 0x1037;
    public static final int TAG_PREVIEW_IMAGE_START = 4150;
    public static final int TAG_PREVIEW_IMAGE_VALID = 0x1035;
    public static final int TAG_PRE_CAPTURE_FRAMES = 0x300;
    public static final int TAG_PRINT_IMAGE_MATCHING_INFO = 0xE00;
    public static final int TAG_RAW_DEVELOPMENT = 0x2030;
    public static final int TAG_RAW_DEVELOPMENT_2 = 0x2031;
    public static final int TAG_RAW_INFO = 0x3000;
    public static final int TAG_RED_BALANCE = 0x1017;
    public static final int TAG_SCENE_AREA = 0x1031;
    public static final int TAG_SCENE_DETECT = 0x1030;
    public static final int TAG_SCENE_DETECT_DATA = 0x1033;
    public static final int TAG_SCENE_MODE = 0x403;
    public static final int TAG_SENSOR_TEMPERATURE = 0x1007;
    public static final int TAG_SERIAL_NUMBER_1 = 0x404;
    public static final int TAG_SERIAL_NUMBER_2 = 0x101A;
    public static final int TAG_SHARPNESS = 0x100F;
    public static final int TAG_SHARPNESS_FACTOR = 0x102A;
    public static final int TAG_SHUTTER_SPEED_VALUE = 0x1000;
    public static final int TAG_SPECIAL_MODE = 0x200;
    public static final int TAG_THUMBNAIL_IMAGE = 0x100;
    public static final int TAG_VALID_BITS = 4140;
    public static final int TAG_WB_MODE = 0x1015;
    public static final int TAG_WHITE_BALANCE_BIAS = 0x304;
    public static final int TAG_WHITE_BALANCE_BRACKET = 0x303;
    public static final int TAG_WHITE_BOARD = 0x301;
    public static final int TAG_ZOOM = 0x100D;
    private static final HashMap _tagNameMap;

    static {
        HashMap hashMap0 = new HashMap();
        OlympusMakernoteDirectory._tagNameMap = hashMap0;
        com.apollographql.apollo.api.b.z(0, hashMap0, "Makernote Version", 1, "Camera Settings");
        com.apollographql.apollo.api.b.z(3, hashMap0, "Camera Settings", 0x40, "Compressed Image Size");
        com.apollographql.apollo.api.b.z(0x81, hashMap0, "Thumbnail Offset", 0x88, "Thumbnail Offset");
        com.apollographql.apollo.api.b.z(0x89, hashMap0, "Thumbnail Length", 0x100, "Thumbnail Image");
        com.apollographql.apollo.api.b.z(0x101, hashMap0, "Colour Mode", 0x102, "Image Quality");
        com.apollographql.apollo.api.b.z(0x103, hashMap0, "Image Quality", 260, "Body Firmware Version");
        com.apollographql.apollo.api.b.z(0x200, hashMap0, "Special Mode", 0x201, "JPEG Quality");
        com.apollographql.apollo.api.b.z(0x202, hashMap0, "Macro", 0x203, "BW Mode");
        com.apollographql.apollo.api.b.z(0x204, hashMap0, "Digital Zoom", 0x205, "Focal Plane Diagonal");
        com.apollographql.apollo.api.b.z(0x206, hashMap0, "Lens Distortion Parameters", 0x207, "Camera Type");
        com.apollographql.apollo.api.b.z(520, hashMap0, "Pict Info", 0x209, "Camera Id");
        com.apollographql.apollo.api.b.z(0x20B, hashMap0, "Image Width", 0x20C, "Image Height");
        com.apollographql.apollo.api.b.z(0x20D, hashMap0, "Original Manufacturer Model", 640, "Preview Image");
        com.apollographql.apollo.api.b.z(0x300, hashMap0, "Pre Capture Frames", 0x301, "White Board");
        com.apollographql.apollo.api.b.z(770, hashMap0, "One Touch WB", 0x303, "White Balance Bracket");
        com.apollographql.apollo.api.b.z(0x304, hashMap0, "White Balance Bias", 0x403, "Scene Mode");
        com.apollographql.apollo.api.b.z(0x404, hashMap0, "Serial Number", 0x405, "Firmware");
        com.apollographql.apollo.api.b.z(0xE00, hashMap0, "Print Image Matching (PIM) Info", 0xF00, "Data Dump");
        com.apollographql.apollo.api.b.z(0xF01, hashMap0, "Data Dump 2", 0x1000, "Shutter Speed Value");
        com.apollographql.apollo.api.b.z(0x1001, hashMap0, "ISO Value", 0x1002, "Aperture Value");
        com.apollographql.apollo.api.b.z(0x1003, hashMap0, "Brightness Value", 4100, "Flash Mode");
        com.apollographql.apollo.api.b.z(0x1005, hashMap0, "Flash Device", 0x1006, "Bracket");
        com.apollographql.apollo.api.b.z(0x1007, hashMap0, "Sensor Temperature", 0x1008, "Lens Temperature");
        com.apollographql.apollo.api.b.z(0x1009, hashMap0, "Light Condition", 0x100A, "Focus Range");
        com.apollographql.apollo.api.b.z(0x100B, hashMap0, "Focus Mode", 0x100C, "Focus Distance");
        com.apollographql.apollo.api.b.z(0x100D, hashMap0, "Zoom", 0x100E, "Macro Focus");
        com.apollographql.apollo.api.b.z(0x100F, hashMap0, "Sharpness", 0x1010, "Flash Charge Level");
        com.apollographql.apollo.api.b.z(0x1011, hashMap0, "Colour Matrix", 0x1012, "Black Level");
        com.apollographql.apollo.api.b.z(0x1013, hashMap0, "Color Temperature BG", 0x1014, "Color Temperature RG");
        com.apollographql.apollo.api.b.z(0x1015, hashMap0, "White Balance Mode", 0x1017, "Red Balance");
        com.apollographql.apollo.api.b.z(4120, hashMap0, "Blue Balance", 0x1019, "Color Matrix Number");
        com.apollographql.apollo.api.b.z(0x101A, hashMap0, "Serial Number", 0x101B, "External Flash AE1 0");
        com.apollographql.apollo.api.b.z(0x101C, hashMap0, "External Flash AE2 0", 0x101D, "Internal Flash AE1 0");
        com.apollographql.apollo.api.b.z(0x101E, hashMap0, "Internal Flash AE2 0", 0x101F, "External Flash AE1");
        com.apollographql.apollo.api.b.z(0x1020, hashMap0, "External Flash AE2", 0x1021, "Internal Flash AE1");
        com.apollographql.apollo.api.b.z(4130, hashMap0, "Internal Flash AE2", 0x1023, "Flash Bias");
        com.apollographql.apollo.api.b.z(0x1024, hashMap0, "Internal Flash Table", 0x1025, "External Flash G Value");
        com.apollographql.apollo.api.b.z(0x1026, hashMap0, "External Flash Bounce", 0x1027, "External Flash Zoom");
        com.apollographql.apollo.api.b.z(0x1028, hashMap0, "External Flash Mode", 0x1029, "Contrast");
        com.apollographql.apollo.api.b.z(0x102A, hashMap0, "Sharpness Factor", 0x102B, "Colour Control");
        com.apollographql.apollo.api.b.z(4140, hashMap0, "Valid Bits", 0x102D, "Coring Filter");
        com.apollographql.apollo.api.b.z(0x102E, hashMap0, "Olympus Image Width", 0x102F, "Olympus Image Height");
        com.apollographql.apollo.api.b.z(0x1030, hashMap0, "Scene Detect", 0x1031, "Scene Area");
        com.apollographql.apollo.api.b.z(0x1033, hashMap0, "Scene Detect Data", 0x1034, "Compression Ratio");
        com.apollographql.apollo.api.b.z(0x1035, hashMap0, "Preview Image Valid", 4150, "Preview Image Start");
        com.apollographql.apollo.api.b.z(0x1037, hashMap0, "Preview Image Length", 0x1038, "AF Result");
        com.apollographql.apollo.api.b.z(0x1039, hashMap0, "CCD Scan Mode", 0x103A, "Noise Reduction");
        com.apollographql.apollo.api.b.z(0x103B, hashMap0, "Infinity Lens Step", 0x103C, "Near Lens Step");
        com.apollographql.apollo.api.b.z(0x103D, hashMap0, "Light Value Center", 0x103E, "Light Value Periphery");
        com.apollographql.apollo.api.b.z(0x103F, hashMap0, "Field Count", 0x2010, "Equipment");
        com.apollographql.apollo.api.b.z(0x2020, hashMap0, "Camera Settings", 0x2030, "Raw Development");
        com.apollographql.apollo.api.b.z(0x2031, hashMap0, "Raw Development 2", 0x2040, "Image Processing");
        com.apollographql.apollo.api.b.z(0x2050, hashMap0, "Focus Info", 0x3000, "Raw Info");
        com.apollographql.apollo.api.b.z(0x4000, hashMap0, "Main Info", 0xF002, "Exposure Mode");
        com.apollographql.apollo.api.b.z(0xF003, hashMap0, "Flash Mode", 0xF004, "White Balance");
        com.apollographql.apollo.api.b.z(0xF005, hashMap0, "Image Size", 0xF006, "Image Quality");
        com.apollographql.apollo.api.b.z(0xF007, hashMap0, "Shooting Mode", 0xF008, "Metering Mode");
        com.apollographql.apollo.api.b.z(0xF009, hashMap0, "Apex Film Speed Value", 0xF00A, "Apex Shutter Speed Time Value");
        com.apollographql.apollo.api.b.z(0xF00B, hashMap0, "Apex Aperture Value", 0xF00C, "Macro Mode");
        com.apollographql.apollo.api.b.z(0xF00D, hashMap0, "Digital Zoom", 0xF00E, "Exposure Compensation");
        com.apollographql.apollo.api.b.z(0xF00F, hashMap0, "Bracket Step", 0xF011, "Interval Length");
        com.apollographql.apollo.api.b.z(0xF012, hashMap0, "Interval Number", 0xF013, "Focal Length");
        com.apollographql.apollo.api.b.z(0xF014, hashMap0, "Focus Distance", 0xF015, "Flash Fired");
        com.apollographql.apollo.api.b.z(0xF016, hashMap0, "Date", 0xF017, "Time");
        com.apollographql.apollo.api.b.z(0xF018, hashMap0, "Max Aperture at Focal Length", 0xF01B, "File Number Memory");
        com.apollographql.apollo.api.b.z(0xF01C, hashMap0, "Last File Number", 0xF01D, "White Balance Red");
        com.apollographql.apollo.api.b.z(0xF01E, hashMap0, "White Balance Green", 0xF01F, "White Balance Blue");
        com.apollographql.apollo.api.b.z(0xF020, hashMap0, "Saturation", 0xF021, "Contrast");
        com.apollographql.apollo.api.b.z(0xF022, hashMap0, "Sharpness", 0xF023, "Subject Program");
        com.apollographql.apollo.api.b.z(0xF024, hashMap0, "Flash Compensation", 0xF025, "ISO Setting");
        com.apollographql.apollo.api.b.z(0xF026, hashMap0, "Camera Model", 0xF027, "Interval Mode");
        com.apollographql.apollo.api.b.z(0xF028, hashMap0, "Folder Name", 0xF029, "Color Mode");
        com.apollographql.apollo.api.b.z(0xF02A, hashMap0, "Color Filter", 0xF02B, "Black and White Filter");
        com.apollographql.apollo.api.b.z(0xF02C, hashMap0, "Internal Flash", 0xF02D, "Apex Brightness Value");
        com.apollographql.apollo.api.b.z(0xF02E, hashMap0, "Spot Focus Point X Coordinate", 0xF02F, "Spot Focus Point Y Coordinate");
        com.apollographql.apollo.api.b.z(0xF030, hashMap0, "Wide Focus Zone", 0xF031, "Focus Mode");
        hashMap0.put(0xF032, "Focus Area");
        hashMap0.put(0xF033, "DEC Switch Position");
        HashMap hashMap1 = new HashMap();
        OlympusMakernoteDirectory.OlympusCameraTypes = hashMap1;
        hashMap1.put("D4028", "X-2,C-50Z");
        hashMap1.put("D4029", "E-20,E-20N,E-20P");
        hashMap1.put("D4034", "C720UZ");
        hashMap1.put("D4040", "E-1");
        hashMap1.put("D4041", "E-300");
        hashMap1.put("D4083", "C2Z,D520Z,C220Z");
        hashMap1.put("D4106", "u20D,S400D,u400D");
        hashMap1.put("D4120", "X-1");
        hashMap1.put("D4122", "u10D,S300D,u300D");
        hashMap1.put("D4125", "AZ-1");
        hashMap1.put("D4141", "C150,D390");
        hashMap1.put("D4193", "C-5000Z");
        hashMap1.put("D4194", "X-3,C-60Z");
        hashMap1.put("D4199", "u30D,S410D,u410D");
        hashMap1.put("D4205", "X450,D535Z,C370Z");
        hashMap1.put("D4210", "C160,D395");
        hashMap1.put("D4211", "C725UZ");
        hashMap1.put("D4213", "FerrariMODEL2003");
        hashMap1.put("D4216", "u15D");
        hashMap1.put("D4217", "u25D");
        hashMap1.put("D4220", "u-miniD,Stylus V");
        hashMap1.put("D4221", "u40D,S500,uD500");
        hashMap1.put("D4231", "FerrariMODEL2004");
        hashMap1.put("D4240", "X500,D590Z,C470Z");
        hashMap1.put("D4244", "uD800,S800");
        hashMap1.put("D4256", "u720SW,S720SW");
        hashMap1.put("D4261", "X600,D630,FE5500");
        hashMap1.put("D4262", "uD600,S600");
        hashMap1.put("D4301", "u810/S810");
        hashMap1.put("D4302", "u710,S710");
        hashMap1.put("D4303", "u700,S700");
        hashMap1.put("D4304", "FE100,X710");
        hashMap1.put("D4305", "FE110,X705");
        hashMap1.put("D4310", "FE-130,X-720");
        hashMap1.put("D4311", "FE-140,X-725");
        hashMap1.put("D4312", "FE150,X730");
        hashMap1.put("D4313", "FE160,X735");
        hashMap1.put("D4314", "u740,S740");
        hashMap1.put("D4315", "u750,S750");
        hashMap1.put("D4316", "u730/S730");
        hashMap1.put("D4317", "FE115,X715");
        hashMap1.put("D4321", "SP550UZ");
        hashMap1.put("D4322", "SP510UZ");
        hashMap1.put("D4324", "FE170,X760");
        hashMap1.put("D4326", "FE200");
        hashMap1.put("D4327", "FE190/X750");
        hashMap1.put("D4328", "u760,S760");
        hashMap1.put("D4330", "FE180/X745");
        hashMap1.put("D4331", "u1000/S1000");
        hashMap1.put("D4332", "u770SW,S770SW");
        hashMap1.put("D4333", "FE240/X795");
        hashMap1.put("D4334", "FE210,X775");
        hashMap1.put("D4336", "FE230/X790");
        hashMap1.put("D4337", "FE220,X785");
        hashMap1.put("D4338", "u725SW,S725SW");
        hashMap1.put("D4339", "FE250/X800");
        hashMap1.put("D4341", "u780,S780");
        hashMap1.put("D4343", "u790SW,S790SW");
        hashMap1.put("D4344", "u1020,S1020");
        hashMap1.put("D4346", "FE15,X10");
        hashMap1.put("D4348", "FE280,X820,C520");
        hashMap1.put("D4349", "FE300,X830");
        hashMap1.put("D4350", "u820,S820");
        hashMap1.put("D4351", "u1200,S1200");
        hashMap1.put("D4352", "FE270,X815,C510");
        hashMap1.put("D4353", "u795SW,S795SW");
        hashMap1.put("D4354", "u1030SW,S1030SW");
        hashMap1.put("D4355", "SP560UZ");
        hashMap1.put("D4356", "u1010,S1010");
        hashMap1.put("D4357", "u830,S830");
        hashMap1.put("D4359", "u840,S840");
        hashMap1.put("D4360", "FE350WIDE,X865");
        hashMap1.put("D4361", "u850SW,S850SW");
        hashMap1.put("D4362", "FE340,X855,C560");
        hashMap1.put("D4363", "FE320,X835,C540");
        hashMap1.put("D4364", "SP570UZ");
        hashMap1.put("D4366", "FE330,X845,C550");
        hashMap1.put("D4368", "FE310,X840,C530");
        hashMap1.put("D4370", "u1050SW,S1050SW");
        hashMap1.put("D4371", "u1060,S1060");
        hashMap1.put("D4372", "FE370,X880,C575");
        hashMap1.put("D4374", "SP565UZ");
        hashMap1.put("D4377", "u1040,S1040");
        hashMap1.put("D4378", "FE360,X875,C570");
        hashMap1.put("D4379", "FE20,X15,C25");
        hashMap1.put("D4380", "uT6000,ST6000");
        hashMap1.put("D4381", "uT8000,ST8000");
        hashMap1.put("D4382", "u9000,S9000");
        hashMap1.put("D4384", "SP590UZ");
        hashMap1.put("D4385", "FE3010,X895");
        hashMap1.put("D4386", "FE3000,X890");
        hashMap1.put("D4387", "FE35,X30");
        hashMap1.put("D4388", "u550WP,S550WP");
        hashMap1.put("D4390", "FE5000,X905");
        hashMap1.put("D4391", "u5000");
        hashMap1.put("D4392", "u7000,S7000");
        hashMap1.put("D4396", "FE5010,X915");
        hashMap1.put("D4397", "FE25,X20");
        hashMap1.put("D4398", "FE45,X40");
        hashMap1.put("D4401", "XZ-1");
        hashMap1.put("D4402", "uT6010,ST6010");
        hashMap1.put("D4406", "u7010,S7010 / u7020,S7020");
        hashMap1.put("D4407", "FE4010,X930");
        hashMap1.put("D4408", "X560WP");
        hashMap1.put("D4409", "FE26,X21");
        hashMap1.put("D4410", "FE4000,X920,X925");
        hashMap1.put("D4411", "FE46,X41,X42");
        hashMap1.put("D4412", "FE5020,X935");
        hashMap1.put("D4413", "uTough-3000");
        hashMap1.put("D4414", "StylusTough-6020");
        hashMap1.put("D4415", "StylusTough-8010");
        hashMap1.put("D4417", "u5010,S5010");
        hashMap1.put("D4418", "u7040,S7040");
        hashMap1.put("D4419", "u9010,S9010");
        hashMap1.put("D4423", "FE4040");
        hashMap1.put("D4424", "FE47,X43");
        hashMap1.put("D4426", "FE4030,X950");
        hashMap1.put("D4428", "FE5030,X965,X960");
        hashMap1.put("D4430", "u7030,S7030");
        hashMap1.put("D4432", "SP600UZ");
        hashMap1.put("D4434", "SP800UZ");
        hashMap1.put("D4439", "FE4020,X940");
        hashMap1.put("D4442", "FE5035");
        hashMap1.put("D4448", "FE4050,X970");
        hashMap1.put("D4450", "FE5050,X985");
        hashMap1.put("D4454", "u-7050");
        hashMap1.put("D4464", "T10,X27");
        hashMap1.put("D4470", "FE5040,X980");
        hashMap1.put("D4472", "TG-310");
        hashMap1.put("D4474", "TG-610");
        hashMap1.put("D4476", "TG-810");
        hashMap1.put("D4478", "VG145,VG140,D715");
        hashMap1.put("D4479", "VG130,D710");
        hashMap1.put("D4480", "VG120,D705");
        hashMap1.put("D4482", "VR310,D720");
        hashMap1.put("D4484", "VR320,D725");
        hashMap1.put("D4486", "VR330,D730");
        hashMap1.put("D4488", "VG110,D700");
        hashMap1.put("D4490", "SP-610UZ");
        hashMap1.put("D4492", "SZ-10");
        hashMap1.put("D4494", "SZ-20");
        hashMap1.put("D4496", "SZ-30MR");
        hashMap1.put("D4498", "SP-810UZ");
        hashMap1.put("D4500", "SZ-11");
        hashMap1.put("D4504", "TG-615");
        hashMap1.put("D4508", "TG-620");
        hashMap1.put("D4510", "TG-820");
        hashMap1.put("D4512", "TG-1");
        hashMap1.put("D4516", "SH-21");
        hashMap1.put("D4519", "SZ-14");
        hashMap1.put("D4520", "SZ-31MR");
        hashMap1.put("D4521", "SH-25MR");
        hashMap1.put("D4523", "SP-720UZ");
        hashMap1.put("D4529", "VG170");
        hashMap1.put("D4531", "XZ-2");
        hashMap1.put("D4535", "SP-620UZ");
        hashMap1.put("D4536", "TG-320");
        hashMap1.put("D4537", "VR340,D750");
        hashMap1.put("D4538", "VG160,X990,D745");
        hashMap1.put("D4541", "SZ-12");
        hashMap1.put("D4545", "VH410");
        hashMap1.put("D4546", "XZ-10");
        hashMap1.put("D4547", "TG-2");
        hashMap1.put("D4548", "TG-830");
        hashMap1.put("D4549", "TG-630");
        hashMap1.put("D4550", "SH-50");
        hashMap1.put("D4553", "SZ-16,DZ-105");
        hashMap1.put("D4562", "SP-820UZ");
        hashMap1.put("D4566", "SZ-15");
        hashMap1.put("D4572", "STYLUS1");
        hashMap1.put("D4574", "TG-3");
        hashMap1.put("D4575", "TG-850");
        hashMap1.put("D4579", "SP-100EE");
        hashMap1.put("D4580", "SH-60");
        hashMap1.put("D4581", "SH-1");
        hashMap1.put("D4582", "TG-835");
        hashMap1.put("D4585", "SH-2 / SH-3");
        hashMap1.put("D4586", "TG-4");
        hashMap1.put("D4587", "TG-860");
        hashMap1.put("D4591", "TG-870");
        hashMap1.put("D4593", "TG-5");
        hashMap1.put("D4809", "C2500L");
        hashMap1.put("D4842", "E-10");
        hashMap1.put("D4856", "C-1");
        hashMap1.put("D4857", "C-1Z,D-150Z");
        hashMap1.put("DCHC", "D500L");
        hashMap1.put("DCHT", "D600L / D620L");
        hashMap1.put("K0055", "AIR-A01");
        hashMap1.put("S0003", "E-330");
        hashMap1.put("S0004", "E-500");
        hashMap1.put("S0009", "E-400");
        hashMap1.put("S0010", "E-510");
        hashMap1.put("S0011", "E-3");
        hashMap1.put("S0013", "E-410");
        hashMap1.put("S0016", "E-420");
        hashMap1.put("S0017", "E-30");
        hashMap1.put("S0018", "E-520");
        hashMap1.put("S0019", "E-P1");
        hashMap1.put("S0023", "E-620");
        hashMap1.put("S0026", "E-P2");
        hashMap1.put("S0027", "E-PL1");
        hashMap1.put("S0029", "E-450");
        hashMap1.put("S0030", "E-600");
        hashMap1.put("S0032", "E-P3");
        hashMap1.put("S0033", "E-5");
        hashMap1.put("S0034", "E-PL2");
        hashMap1.put("S0036", "E-M5");
        hashMap1.put("S0038", "E-PL3");
        hashMap1.put("S0039", "E-PM1");
        hashMap1.put("S0040", "E-PL1s");
        hashMap1.put("S0042", "E-PL5");
        hashMap1.put("S0043", "E-PM2");
        hashMap1.put("S0044", "E-P5");
        hashMap1.put("S0045", "E-PL6");
        hashMap1.put("S0046", "E-PL7");
        hashMap1.put("S0047", "E-M1");
        hashMap1.put("S0051", "E-M10");
        hashMap1.put("S0052", "E-M5MarkII");
        hashMap1.put("S0059", "E-M10MarkII");
        hashMap1.put("S0061", "PEN-F");
        hashMap1.put("S0065", "E-PL8");
        hashMap1.put("S0067", "E-M1MarkII");
        hashMap1.put("SR45", "D220");
        hashMap1.put("SR55", "D320L");
        hashMap1.put("SR83", "D340L");
        hashMap1.put("SR85", "C830L,D340R");
        hashMap1.put("SR852", "C860L,D360L");
        hashMap1.put("SR872", "C900Z,D400Z");
        hashMap1.put("SR874", "C960Z,D460Z");
        hashMap1.put("SR951", "C2000Z");
        hashMap1.put("SR952", "C21");
        hashMap1.put("SR953", "C21T.commu");
        hashMap1.put("SR954", "C2020Z");
        hashMap1.put("SR955", "C990Z,D490Z");
        hashMap1.put("SR956", "C211Z");
        hashMap1.put("SR959", "C990ZS,D490Z");
        hashMap1.put("SR95A", "C2100UZ");
        hashMap1.put("SR971", "C100,D370");
        hashMap1.put("SR973", "C2,D230");
        hashMap1.put("SX151", "E100RS");
        hashMap1.put("SX351", "C3000Z / C3030Z");
        hashMap1.put("SX354", "C3040Z");
        hashMap1.put("SX355", "C2040Z");
        hashMap1.put("SX357", "C700UZ");
        hashMap1.put("SX358", "C200Z,D510Z");
        hashMap1.put("SX374", "C3100Z,C3020Z");
        hashMap1.put("SX552", "C4040Z");
        hashMap1.put("SX553", "C40Z,D40Z");
        hashMap1.put("SX556", "C730UZ");
        hashMap1.put("SX558", "C5050Z");
        hashMap1.put("SX571", "C120,D380");
        hashMap1.put("SX574", "C300Z,D550Z");
        hashMap1.put("SX575", "C4100Z,C4000Z");
        hashMap1.put("SX751", "X200,D560Z,C350Z");
        hashMap1.put("SX752", "X300,D565Z,C450Z");
        hashMap1.put("SX753", "C750UZ");
        hashMap1.put("SX754", "C740UZ");
        hashMap1.put("SX755", "C755UZ");
        hashMap1.put("SX756", "C5060WZ");
        hashMap1.put("SX757", "C8080WZ");
        hashMap1.put("SX758", "X350,D575Z,C360Z");
        hashMap1.put("SX759", "X400,D580Z,C460Z");
        hashMap1.put("SX75A", "AZ-2ZOOM");
        hashMap1.put("SX75B", "D595Z,C500Z");
        hashMap1.put("SX75C", "X550,D545Z,C480Z");
        hashMap1.put("SX75D", "IR-300");
        hashMap1.put("SX75F", "C55Z,C5500Z");
        hashMap1.put("SX75G", "C170,D425");
        hashMap1.put("SX75J", "C180,D435");
        hashMap1.put("SX771", "C760UZ");
        hashMap1.put("SX772", "C770UZ");
        hashMap1.put("SX773", "C745UZ");
        hashMap1.put("SX774", "X250,D560Z,C350Z");
        hashMap1.put("SX775", "X100,D540Z,C310Z");
        hashMap1.put("SX776", "C460ZdelSol");
        hashMap1.put("SX777", "C765UZ");
        hashMap1.put("SX77A", "D555Z,C315Z");
        hashMap1.put("SX851", "C7070WZ");
        hashMap1.put("SX852", "C70Z,C7000Z");
        hashMap1.put("SX853", "SP500UZ");
        hashMap1.put("SX854", "SP310");
        hashMap1.put("SX855", "SP350");
        hashMap1.put("SX873", "SP320");
        hashMap1.put("SX875", "FE180/X745");
        hashMap1.put("SX876", "FE190/X750");
    }

    public OlympusMakernoteDirectory() {
        this.setDescriptor(new d(0, this));
    }

    @Override  // com.drew.metadata.b
    public String getName() {
        return "Olympus Makernote";
    }

    @Override  // com.drew.metadata.b
    public HashMap getTagNameMap() {
        return OlympusMakernoteDirectory._tagNameMap;
    }

    public boolean isIntervalMode() {
        Long long0 = this.getLongObject(0xF007);
        return long0 != null && ((long)long0) == 5L;
    }

    private void processCameraSettings(byte[] arr_b) {
        int v = 0;
        l l0 = new l(0, arr_b);
        l0.a = true;
        int v1 = arr_b.length / 4;
        while(v < v1) {
            try {
                this.setInt(0xF000 + v, l0.i());
                ++v;
                continue;
            }
            catch(IOException unused_ex) {
            }
            break;
        }
    }

    @Override  // com.drew.metadata.b
    public void setByteArray(int v, byte[] arr_b) {
        if(v != 1 && v != 3) {
            super.setByteArray(v, arr_b);
            return;
        }
        this.processCameraSettings(arr_b);
    }
}

